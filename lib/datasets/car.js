// Generated by CoffeeScript 1.8.0
(function() {
  var Car, fs, path, request;

  request = require("request");

  path = require("path");

  fs = require("fs");

  module.exports.Car = Car = (function() {
    function Car(src_path) {
      this.src_path = src_path;
      this.is_browser = typeof window !== 'undefined';
      this.x = [];
      this.y = [];
      this.hasData();
      if (!this.is_browser) {
        this.src_path = 'http://archive.ics.uci.edu/ml/machine-learning-databases/car/car.data';
      }
      if (!this.hasData()) {
        this.download();
      }
      this.parse();
    }

    Car.prototype.hasData = function() {
      if (this.is_browser) {
        return sessionStorage.getItem('car') !== null;
      } else {
        return fs.existsSync(path.join(__dirname, '../../data/car.data'));
      }
    };

    Car.prototype.download = function() {
      if (this.is_browser) {
        return $.ajax({
          async: false,
          type: "GET",
          url: this.src_path,
          dataType: "text",
          context: this,
          success: function(data, status, xhr) {
            if (typeof Storage === "undefined") {
              return alert("このブラウザではこのデータで試すことができません。");
            } else {
              sessionStorage.setItem('car', data);
              return console.log("data download was done.");
            }
          },
          error: function(xhr, status, error) {
            return alert(status);
          },
          complete: function(xhr, status) {
            return alert(status);
          }
        });
      } else {
        return request('http://archive.ics.uci.edu/ml/machine-learning-databases/car/car.data').pipe(fs.createWriteStream(path.join(__dirname, '../../data/car.data')));
      }
    };

    Car.prototype.parse = function() {
      var features, line, raw_data, _data, _i, _len, _results, _x, _y;
      if (this.is_browser) {
        raw_data = sessionStorage.getItem('car');
      } else {
        raw_data = fs.readFileSync(path.join(__dirname, '../../data/car.data'), 'utf8');
      }
      _data = raw_data.split("\n");
      _results = [];
      for (_i = 0, _len = _data.length; _i < _len; _i++) {
        line = _data[_i];
        features = line.split(',');
        _x = [];
        _y = [];
        if (features.length === 7) {
          _x.push((function() {
            switch (features[0]) {
              case "low":
                return 1;
              case "med":
                return 2;
              case "high":
                return 3;
              case "vhigh":
                return 4;
              default:
                return -1;
            }
          })());
          _x.push((function() {
            switch (features[1]) {
              case "low":
                return 1;
              case "med":
                return 2;
              case "high":
                return 3;
              case "vhigh":
                return 4;
              default:
                return -1;
            }
          })());
          _x.push((function() {
            switch (features[2]) {
              case "2":
                return 2;
              case "3":
                return 3;
              case "4":
                return 4;
              case "5more":
                return 5;
              default:
                return -1;
            }
          })());
          _x.push((function() {
            switch (features[3]) {
              case "2":
                return 2;
              case "4":
                return 4;
              case "more":
                return 5;
              default:
                return -1;
            }
          })());
          _x.push((function() {
            switch (features[4]) {
              case "small":
                return 1;
              case "med":
                return 2;
              case "big":
                return 3;
              default:
                return -1;
            }
          })());
          _x.push((function() {
            switch (features[5]) {
              case "low":
                return 1;
              case "med":
                return 2;
              case "high":
                return 3;
              default:
                return -1;
            }
          })());
          _y.push((function() {
            switch (features[6]) {
              case "unacc":
                return 0;
              default:
                return 1;
            }
          })());
          this.x.push(_x);
          _results.push(this.y.push(_y));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Car;

  })();

}).call(this);
