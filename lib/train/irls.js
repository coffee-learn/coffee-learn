// Generated by CoffeeScript 1.8.0
(function() {
  var IRLS, Matrix;

  Matrix = require('../math/matrix').Matrix;

  module.exports.IRLS = IRLS = (function() {
    function IRLS(dataset, model, use_bias) {
      var i, nvis, _i, _ref;
      this.model = model;
      this.use_bias = use_bias != null ? use_bias : false;
      this.X = new Matrix(JSON.parse(JSON.stringify(dataset['x'])));
      this.Y = new Matrix(JSON.parse(JSON.stringify(dataset['y'])));
      if (this.use_bias = true) {
        for (i = _i = 0, _ref = this.X.row(); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.X.matrix[i].push(1);
        }
      }
      this.model.setup(nvis = this.X.col());
    }

    IRLS.prototype.train = function() {
      var H, N, R, Y, diff, n, phi, w_new, y_n, _i;
      N = this.X.row();
      phi = this.X;
      R = Matrix.zeros(N, N);
      Y = [];
      for (n = _i = 0; 0 <= N ? _i < N : _i > N; n = 0 <= N ? ++_i : --_i) {
        y_n = this.model.fprop(new Matrix([this.X.matrix[n]]));
        R.matrix[n][n] = y_n * (1 - y_n);
        Y.push([y_n]);
      }
      H = Matrix.dot(phi.T(), Matrix.dot(R, phi));
      w_new = Matrix.sub(this.model.layer.w, Matrix.dot(H.inv(), Matrix.dot(phi.T(), Matrix.sub(new Matrix(Y), this.Y))));
      diff = Matrix.norm(Matrix.sub(w_new, this.model.layer.w)) / Matrix.norm(this.model.layer.w);
      this.model.layer.w = w_new;
      return diff;
    };

    IRLS.prototype.validate = function() {
      var correct, i, n_in, predict_y, results, _i, _len, _ref;
      results = [];
      correct = 0;
      _ref = this.X.matrix;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        n_in = _ref[i];
        predict_y = this.model.predict(new Matrix([n_in]));
        results.push([predict_y]);
        if (predict_y === this.Y.matrix[i][0]) {
          correct += 1;
        }
      }
      return [this.X.matrix, this.Y.matrix, results, 100 * (correct / this.Y.row())];
    };

    IRLS.prototype.fprop = function(n_in, detail) {
      if (detail == null) {
        detail = false;
      }
      return this.model.fprop(new Matrix([n_in]), detail);
    };

    IRLS.prototype.predict = function(n_in) {
      return this.model.predict(new Matrix([n_in]));
    };

    return IRLS;

  })();

}).call(this);
